<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Yulz Coder</title>
 <link href="http://lanyon.getpoole.com/atom.xml" rel="self"/>
 <link href="http://lanyon.getpoole.com/"/>
 <updated>2017-02-04T16:12:54+08:00</updated>
 <id>http://lanyon.getpoole.com</id>
 <author>
   <name>Yulz</name>
   <email>191237647@qq.com</email>
 </author>

 
 <entry>
   <title>2017年的GCD学习</title>
   <link href="http://lanyon.getpoole.com/2017/02/04/17%E5%B9%B4%E7%9A%84GCD%E5%AD%A6%E4%B9%A0/"/>
   <updated>2017-02-04T00:00:00+08:00</updated>
   <id>http://lanyon.getpoole.com/2017/02/04/17年的GCD学习</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  基础不牢，一点点补起来吧，虽然之前用过，但是为什么这么用，完全不懂，有时候都是试的。。。
&lt;/div&gt;
&lt;p&gt;文章的主要内容是从 &lt;a href=&quot;http://mobile.51cto.com/iphone-402981.htm&quot;&gt;这里&lt;/a&gt; 看到的，主要也是复述一遍，让自己不只是读一下就过去了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GCD是一套底层API，提供并发程序编写方法。允许程序将任务切分为多个单一任务，然后提交到工作队列并发的或者穿行的执行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;优势：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;易用，比thread简单易用，基于block它能极为简单的在不同代码作用域之间传递上下文&lt;/li&gt;
  &lt;li&gt;效率，快速、更易用。&lt;/li&gt;
  &lt;li&gt;性能，GCD自动根据系统负载来增减线程数。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;GCD是纯c语言的，面向对象的风格，GCD对象被称为dispatch object，是引用计数的。但并不参与垃圾回收系统，必须手动管理GCD对象的内存。
GCD的基本概念就是dispatch queue，是一个对象，它可以接受任务，并将任务以 先到先执行的顺序执行，可以是并发或串行的，并发会基于系统负载，串行队列同一时间只执行单一任务。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GCD中有三种队列类型：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The main queue：与主线程功能相同，提交的任务会在主线程中执行，调用dispatch_get_main_queue()来获得，因为与主线程相关，所以是串行队列。&lt;/li&gt;
  &lt;li&gt;Global queues：全局队列是并发队列，并由整个进程共享，进程中存在高、中、低三个优先级队列，调用dispatch_get_global_queue()传入优先级访问队列。&lt;/li&gt;
  &lt;li&gt;用户队列：调用dispatch_queue_create创建队列，这些队列是串行的，可以用来完成同步机制。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;向一个队列提交任务，用dispatch_async函数，传入一个队列和一个block，队列会在轮到这个block时执行block内的代码，&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;dispatch_async( dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
	[self xxxxx];
	NSLog(@“xxxxxxxxxx”);
});&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;dispatch_async会立即返回，block会在后台异步执行。
完成block任务时，更新界面，嵌套使用，在main queue 更新界面&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ 
       [self xxxx]; 
       dispatch_async(dispatch_get_main_queue(), ^{
		[xxxx reload];
	});
});&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;dispatch_sync与dispatch_async的不同是，会等待block代码执行后返回，结合__block类型修饰符,可以冲执行中的block获取一个值，&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;__block NSString *stringValue;
dispatch_sync( , ^{
        // __block variables aren't automatically retained
        // so we'd better make sure we have a reference we can keep
	stringValue = [[textField stringValue] copy];
});
[stringValue autorelease];
// use stringValue in the background now&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;还可以使用嵌套的block来中止后台线程，然后从主线程中获取值，然后再将后期处理提交至后台线程。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;dispatch_queue_t bgQueue = myQueue;
dispatch_async(dispatch_get_main_queue(), ^{
	NSString *stringValue = @“xxxxx”;
	dispatch_async(bgQueue,^{
		// use stringValue in the background now
	});
});&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;myQueue可以是用户队列也可以是全局队列。
用户队列可以用于替代锁来完成同步机制，在传统多线程中，你可能有一个对象要被多个线程使用，你需要一个锁来保护这个对象。
NSLock *lock;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;-(id)something{
	id lockalSomething;
	[lock lock];
	localSomething = [something something];
	[lock unlock];
	return localSomething;
}

-(void)setSomething:(id)newSomething{
	[lock lock];
	if(newSomething != something){
		[something something];
		something = [newSomething something];
		[self xxxxx];
	}
	[lock unlock];
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;使用GCD，可以使用queue来替代。
要用于同步机制，queue必须是一个用户队列，然后用dispatch_async(dispatch_sync)将共享数据的访问封装起来。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;-（id）something{
	__block id localSomething;
	dispatch_sync(queue,^{
		localSomething = [something something];
	});
	return localSomething;
}
-(void)setSomething:(id)newSomething{
	dispatch_async(queue,^{
		if(newSomething != something){
			[something something];
			something = newSomething;
			[self xxxxxxx];
		}
	});
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;注意在第二个版本的代码中， -setSomething:是怎么使用dispatch_async的。调用 -setSomething:会立即返回，然后这一大堆工作会在后台执行。如果updateSomethingCaches是一个很费时费力的任务，且调用者将要进行一项处理器高负荷任务，那么这样做会很棒.&lt;/p&gt;

&lt;p&gt;设想下循环
for(id obj in array){
	[self doSome];
}
用GCD实现&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0);
for(id obj in array){
	dispath_async(queue,^{
		[self doSome];
	});
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;新增需求，操作结束后，还要对结果进行其他操作
for(id obj in array){
	[self doSomexxx];
}
[self doOtherxxx];
不能简单实用dispatch_sync，因为会阻塞。解决这个问题的一种方式是使用dispatch group ,一个dispatch group可以用来将多个block组成一组以监测这些block全部完成或者等待全部完成时的消息，使用函数dispatch_group_create来创建，然后使用dispatch_group_async来将block提交至一个dispatch queue,同时将它们添加至一个组。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;dispatch_queue_t queue = dispathc_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0);
dispatch_group_t group = dispatch_group_create();
for(id obj in array){
	dispatch_group_async(group,queue,^{
		[self doSomexxx];
	});
}
dispatch_group_wait(group, DISPATCH_TIME_FOREVER);
dispatch_release(group);
[self doOtherxxxx];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果可以异步执行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;dispatch_queue_t queue = dispatch_get_global_qeueue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);  
dispatch_group_t group = dispatch_group_create();  
for(id obj in array)  
    dispatch_group_async(group, queue, ^{  
        [self doSomethingIntensiveWith:obj];  
    });  
dispatch_group_notify(group, queue, ^{  
    [self doSomethingWith:array];  
});  
dispatch_release(group);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果doSomethingWith:需要在主线程中执行，那么我们只要将main queue而非全局队列传给dispatch_group_notify函数就行了。
对于同步执行，GCD提供了一个简化方法叫做dispatch_apply。这个函数调用单一block多次.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;dispatch_queue_t queue = dispatch_get_global_qeueue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);  
dispatch_apply([array count], queue, ^(size_t index){  
    [self doSomethingIntensiveWith:[array objectAtIndex:index]];  
});  
[self doSomethingWith:array];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;但是异步咋办？dispatch_apply函数可是没有异步版本的。所以我们只要用dispatch_async函数将所有代码推到后台就行了&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
dispatch_async(queue,^{
	dispatch_apply([array count], queue, ^(size_t index){  
    		[self doSomethingIntensiveWith:[array objectAtIndex:index]];  
	});  
	[self doSomethingWith:array];
});&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>no zuo no die</title>
   <link href="http://lanyon.getpoole.com/2016/12/26/zuoimage/"/>
   <updated>2016-12-26T00:00:00+08:00</updated>
   <id>http://lanyon.getpoole.com/2016/12/26/zuoimage</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  呦呦呦! 作死的同事.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/1.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/2.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/3.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/4.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/5.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/6.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/7.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/8.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/9.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/10.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/11.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/12.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/13.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/14.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/15.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/16.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/17.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/18.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/19.gif&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;img src=&quot;/assets/20.gif&quot; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>2016年的总结</title>
   <link href="http://lanyon.getpoole.com/2016/12/26/16%E5%B9%B4%E7%9A%84%E6%80%BB%E7%BB%93/"/>
   <updated>2016-12-26T00:00:00+08:00</updated>
   <id>http://lanyon.getpoole.com/2016/12/26/16年的总结</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  自己很早之前就想写博客、技术文章什么的，但是总感觉自己肚子里还没什么东西。迟迟都没有，或者也坚持不下去，好在现在决定写了，也算是好的开始吧，希望能坚持下去吧，既然作为第一个正式的总结，那就把它好好写写吧.
&lt;/div&gt;
&lt;p&gt;先简单的说下自己的信息吧：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一个普通计算机系的本科毕业生，入门语言是c，后来转的Java，再后来就是Android，2014年中，应该算是我正式从事iOS的工作，一直到现在都是iOS开发。没经历过大的IT公司，最大的100+的人（应该算大的了）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从第一个公司说起吧，刚毕业，当时的想法就是赶快找个工作吧，管它什么样呢。先有工作学点东西，到时候再换就行了。也不知道当时急个什么劲，第一个公司是到我们那第三次招聘，我才进去的（之前的两次都被pass了），进去之后感觉还很新奇，干劲十足，丫的，我要什么活都能干，什么都能干好（这种心态棒棒哒），但是刚入职没太久就被分到出差的一个组里了。去到北京干了三个月回来了（一个什么插件开发，实际就是去缕缕文档，有部分源码看看）。技术能力没有多大提高。回来之后终于正经干点开发的活了，食品溯源，以为是开发相应的系统，但实际就是给各个超市装电脑。&lt;strong&gt;直到一天&lt;/strong&gt; 我发现自己好久没写代码了，发现自己并不是想每天都在外面跑超市，现在做的对我没有好处，也不是我想要的。就决定换公司了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;第二家公司只有几个人&lt;/h2&gt;

&lt;p&gt;很好管理，什么都是老板一个人说的算，因为公司小，所以基本有活就干，这里感谢一下 &lt;strong&gt;东哥&lt;/strong&gt; 这是第一个在工作后对我有很大帮助的同事。工作内容基本就是哪块需要个网站，给别人做一个，有什么其他需求，再根据需求改改。熟悉了之后基本就是在搬砖。然后就是弄弄Android（几乎就是没有Android的活，就当是学习了），刚好我们隔壁是个做游戏的小工作组室，3、5个人，研究个游戏，反正也没上线，后来就黄了。 &lt;strong&gt;这是我第一次接触iOS&lt;/strong&gt; 公司揽到一个给空军部队做管理系统的活，但是要在iPad上。当时的移动端就我一个人，我还只会Android，老板找到我，意味深长的说，既然是移动端，那你也应该会苹果开发，就让我做并且说不难，要用phoneGap做，就这样，我开始对iOS开发有兴趣了。&lt;/p&gt;

&lt;h2 id=&quot;qq&quot;&gt;第三家公司是qq聊过去的&lt;/h2&gt;

&lt;p&gt;在去这家公司之前，是别人推荐的。然后加QQ聊过去的。刚去的时候就是奔移动端去的。当时问我对iOS开发有没有兴趣，也就是到这家公司的时候，我才正式的成为一个iOS的初级菜鸟，当时正式swift将要发布的时间。当时的工资3k。这里碰到第二个需要感谢的人 &lt;strong&gt;晶姐&lt;/strong&gt; 因为当时对iOS了解的不多，问题都是请教她的。碰到的一切应该都可以算是全新的吧。&lt;/p&gt;

&lt;p&gt;刚开始公司规模只有不到20人。这个时候其实是干的最开心的时候，大家没有勾心斗角，大家的目标明确，就是完成既定里程碑。虽然很累，经常加班。1年的工时，年底总结的工时是1年半的工时。后来公司的这个项目做好了。公司决定转为产品。这个时候公司大概70、80人了。但是仅仅改个名就叫产品的话，后面就接连不断的问题出现了。公司以项目为开始，做的即时通讯的APP，后来转产品，公司的战略规划也变成平台了。可是程序并没有 &lt;strong&gt;重构&lt;/strong&gt;，基本的消息协议 &lt;strong&gt;未修改&lt;/strong&gt;，很多痛点问题没有解决。每个阶段都在疲于奔命的改bug，我看到公司对转产品的定义，就是皮肤换了好几套、一个简单的信息展示界面重新设计的很多遍，不知道核心的东西、核心的功能是什么，只是一味的加没有人用的功能。
最终公司看到这些问题了。于是成立了成都分公司，分公司的团队认为现有的架构不足以支撑，决定重做，然后公司就让分公司重做了。然后分公司有了一点点成果了。就来邀功了，什么都是捡现成的，大言不惭的说龙江分公司2年的活，成都分公司2个月就干出来了，（主要是移动端）我真的想说真tm不要脸。需求都是这两年一点点加上来的，如果能一次都说出来，也不用拖两年才干完。最终经过质检部测试部门给出的结论，就是成都分公司的500+的bug。不过也没看出公司对这么多bug有什么不满，依旧对分公司很有信心。说这么只是我个人对公司对我们态度的不忿而已，我们之前所有的任务都是按照领导的要求及期限完成的，结果目标完成，公司对目标的不认可却放到开发的身上。真正的责任不应该是领导开发的人么？在这个公司待到现在，真心希望公司更好，但是现在内部的管理机制存在很大问题。也可能是我个人能力不行，融入不进去现在的氛围，但是我希望我奋斗过的公司可以走的更远。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;真正的总结&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;前面的都是废话，这里才是真正的总结&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从毕业到现在，个人的开发技能真的一般。不知道为什么自己就是写不出高端，松耦、高效的代码，从事iOS也两年了。之前基本就是再累加代码，写的程序很烂，来功能就是累加，不知道怎么去设计，虽然现在知道应该，高复用、松耦合什么的，但是还是差很多，很多问题或者功能点。都要上网搜才知道怎么写，对现有的API也不了解。需要提高的地方还有很多啊。希望哪位大神能指点迷津，怎么能在iOS开发里走的更远。&lt;/p&gt;

&lt;p&gt;自己觉得应该提升下这么内容：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;对基础的API了解不够&lt;/li&gt;
  &lt;li&gt;对控件知道的太少&lt;/li&gt;
  &lt;li&gt;英语太次&lt;/li&gt;
  &lt;li&gt;对iOS的某些写法不熟&lt;/li&gt;
  &lt;li&gt;读的少、写的少&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;毕业那年，给自己定一个满怀激情的5年目标。现在5年马上到了，还没有实现，是什么让自己停滞不前了呢？可能是…不太清楚自己要的是什么吧！方向不阳，激情未央。&lt;/p&gt;

&lt;p&gt;总之。2016这一年，没什么大的进步。希望这是我荒废的最后一年，之后的每天、每周、每月、每年都有进步。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing Lanyon</title>
   <link href="http://lanyon.getpoole.com/2014/01/02/introducing-lanyon/"/>
   <updated>2014-01-02T00:00:00+08:00</updated>
   <id>http://lanyon.getpoole.com/2014/01/02/introducing-lanyon</id>
   <content type="html">&lt;p&gt;Lanyon is an unassuming &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; theme that places content first by tucking away navigation in a hidden drawer. It’s based on &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, the Jekyll butler.&lt;/p&gt;

&lt;h3 id=&quot;built-on-poole&quot;&gt;Built on Poole&lt;/h3&gt;

&lt;p&gt;Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by &lt;a href=&quot;https://twitter.com/mdo&quot;&gt;@mdo&lt;/a&gt;. Poole, and every theme built on it (like Lanyon here) includes the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/atom.xml&quot;&gt;RSS feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Mobile friendly design and development&lt;/li&gt;
  &lt;li&gt;Easily scalable text and component sizing with &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
  &lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
  &lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
  &lt;li&gt;Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lanyon-features&quot;&gt;Lanyon features&lt;/h3&gt;

&lt;p&gt;In addition to the features of Poole, Lanyon adds the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Toggleable sliding sidebar (built with only CSS) via &lt;strong&gt;☰&lt;/strong&gt; link in top corner&lt;/li&gt;
  &lt;li&gt;Sidebar includes support for textual modules and a dynamically generated navigation with active link support&lt;/li&gt;
  &lt;li&gt;Two orientations for content and sidebar, default (left sidebar) and &lt;a href=&quot;https://github.com/poole/lanyon#reverse-layout&quot;&gt;reverse&lt;/a&gt; (right sidebar), available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poole/lanyon#themes&quot;&gt;Eight optional color schemes&lt;/a&gt;, available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/poole/lanyon#readme&quot;&gt;Head to the readme&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Lanyon is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Lanyon is developed on and hosted with GitHub. Head to the &lt;a href=&quot;https://github.com/poole/lanyon&quot;&gt;GitHub repository&lt;/a&gt; for downloads, bug reports, and features requests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://lanyon.getpoole.com/2014/01/01/example-content/"/>
   <updated>2014-01-01T00:00:00+08:00</updated>
   <id>http://lanyon.getpoole.com/2014/01/01/example-content</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Howdy! This is an example blog post that shows several types of HTML content supported in this theme.
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console
&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;return a + b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What's Jekyll?</title>
   <link href="http://lanyon.getpoole.com/2013/12/31/whats-jekyll/"/>
   <updated>2013-12-31T00:00:00+08:00</updated>
   <id>http://lanyon.getpoole.com/2013/12/31/whats-jekyll</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. From &lt;a href=&quot;https://github.com/mojombo/jekyll/blob/master/README.markdown&quot;&gt;the project’s readme&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory […] and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your project’s page or blog right here from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s an immensely useful tool and one we encourage you to use here with Lanyon.&lt;/p&gt;

&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 

</feed>
